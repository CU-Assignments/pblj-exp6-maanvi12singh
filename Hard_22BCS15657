class Product {
    private String name;
    private String category;
    private double price;

    public Product(String name, String category, double price) {
        this.name = name;
        this.category = category;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public String getCategory() {
        return category;
    }

    public double getPrice() {
        return price;
    }

    @Override
    public String toString() {
        return "Product{name='" + name + "', category='" + category + "', price=" + price + "}";
    }

    public static void main(String[] args) {
        // Creating a list of products
        List<Product> products = Arrays.asList(
            new Product("Laptop", "Electronics", 1000),
            new Product("Smartphone", "Electronics", 800),
            new Product("Headphones", "Electronics", 150),
            new Product("Shoes", "Fashion", 50),
            new Product("T-Shirt", "Fashion", 20),
            new Product("Washing Machine", "Home Appliances", 500),
            new Product("Refrigerator", "Home Appliances", 1200),
            new Product("Microwave", "Home Appliances", 200)
        );

        // Grouping products by category
        Map<String, List<Product>> productsByCategory = products.stream()
                .collect(Collectors.groupingBy(Product::getCategory));

        System.out.println("Products grouped by category:");
        productsByCategory.forEach((category, productList) -> {
            System.out.println(category + ": " + productList);
        });

        // Finding the most expensive product in each category
        Map<String, Optional<Product>> mostExpensiveByCategory = products.stream()
                .collect(Collectors.groupingBy(Product::getCategory, 
                        Collectors.maxBy(Comparator.comparingDouble(Product::getPrice))));

        System.out.println("\nMost expensive product in each category:");
        mostExpensiveByCategory.forEach((category, product) -> {
            System.out.println(category + ": " + product.orElse(null));
        });

        // Calculating the average price of all products
        double averagePrice = products.stream()
                .mapToDouble(Product::getPrice)
                .average()
                .orElse(0);

        System.out.println("\nAverage price of all products: " + averagePrice);
    }
}
